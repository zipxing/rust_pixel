//! # Commodore 64 Character Set Definitions
//!
//! This module contains the complete Commodore 64 character set data in bitmap format.
//! Each character is represented as an 8x8 pixel matrix where each byte represents
//! one horizontal row of pixels.
//!
//! ## Character Set Overview
//!
//! The C64 character set includes:
//! - **C64LOW**: 128 characters including lowercase letters, numbers, symbols, and graphics
//! - **C64UP**: 128 characters including uppercase letters, numbers, symbols, and graphics
//!
//! ## Bit Format
//!
//! Each character is stored as an array of 8 bytes, where:
//! - Each byte represents one horizontal row (8 pixels)
//! - Bit 7 (leftmost) represents the leftmost pixel
//! - Bit 0 (rightmost) represents the rightmost pixel  
//! - 1 = foreground pixel, 0 = background pixel
//!
//! ## Example Usage
//!
//! ```rust
//! // Get the bitmap for lowercase 'a' (character 1 in C64LOW)
//! let lowercase_a = C64LOW[1];
//! // Row 0: 0x00 = 00000000 (all background)
//! // Row 1: 0x00 = 00000000 (all background)
//! // Row 2: 0x3c = 00111100 (foreground pattern)
//! // Row 3: 0x06 = 00000110 (foreground pattern)
//! // ... and so on
//! ```
//!
//! ## Historical Context
//!
//! The Commodore 64's character ROM contained both uppercase/graphics and lowercase/uppercase
//! character sets. This data preserves the exact pixel patterns used by the original C64,
//! making it valuable for:
//! - Retro computing emulation
//! - Pixel-perfect text rendering in C64 style
//! - Creating authentic-looking C64 graphics and text
//! - Symbol extraction and pattern matching applications

/// Commodore 64 lowercase character set (PETSCII set 1)
///
/// This array contains 128 character definitions representing the C64's lowercase
/// character set, also known as PETSCII set 1. Each character is an 8x8 pixel
/// bitmap stored as 8 consecutive bytes.
///
/// ## Character Mapping (partial list)
/// - Index 0: Special character (copyright symbol variant)
/// - Index 1-26: Lowercase letters a-z  
/// - Index 27-31: Special bracket and arrow characters
/// - Index 32: Space character
/// - Index 33-47: Punctuation and symbols (!, ", #, $, %, etc.)
/// - Index 48-57: Numbers 0-9
/// - Index 58-64: More punctuation (:, ;, <, =, >, ?, @)
/// - Index 65-90: Uppercase letters A-Z
/// - Index 91-127: Graphics characters and symbols
///
/// ## Technical Details
/// - Total characters: 128
/// - Character size: 8x8 pixels
/// - Storage format: 8 bytes per character (one byte per row)
/// - Bit ordering: MSB = leftmost pixel, LSB = rightmost pixel
pub const C64LOW: [[u8; 8]; 128] = [
    // Character 0: Copyright symbol variant
    [0x3c, 0x66, 0x6e, 0x6e, 0x60, 0x62, 0x3c, 0x00],
    // Character 1: Lowercase 'a'
    [0x00, 0x00, 0x3c, 0x06, 0x3e, 0x66, 0x3e, 0x00],
    // Character 2: Lowercase 'b'
    [0x00, 0x60, 0x60, 0x7c, 0x66, 0x66, 0x7c, 0x00],
    // Character 3: Lowercase 'c'  
    [0x00, 0x00, 0x3c, 0x60, 0x60, 0x60, 0x3c, 0x00],
    // Character 4: Lowercase 'd'
    [0x00, 0x06, 0x06, 0x3e, 0x66, 0x66, 0x3e, 0x00],
    // Character 5: Lowercase 'e'
    [0x00, 0x00, 0x3c, 0x66, 0x7e, 0x60, 0x3c, 0x00],
    // Character 6: Lowercase 'f'
    [0x00, 0x0e, 0x18, 0x3e, 0x18, 0x18, 0x18, 0x00],
    // Character 7: Lowercase 'g'
    [0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x7c],
    // Character 8: Lowercase 'h'
    [0x00, 0x60, 0x60, 0x7c, 0x66, 0x66, 0x66, 0x00],
    // Character 9: Lowercase 'i'
    [0x00, 0x18, 0x00, 0x38, 0x18, 0x18, 0x3c, 0x00],
    // Character 10: Lowercase 'j'
    [0x00, 0x06, 0x00, 0x06, 0x06, 0x06, 0x06, 0x3c],
    // Character 11: Lowercase 'k'
    [0x00, 0x60, 0x60, 0x6c, 0x78, 0x6c, 0x66, 0x00],
    // Character 12: Lowercase 'l'
    [0x00, 0x38, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00],
    // Character 13: Lowercase 'm'
    [0x00, 0x00, 0x66, 0x7f, 0x7f, 0x6b, 0x63, 0x00],
    // Character 14: Lowercase 'n'
    [0x00, 0x00, 0x7c, 0x66, 0x66, 0x66, 0x66, 0x00],
    // Character 15: Lowercase 'o'
    [0x00, 0x00, 0x3c, 0x66, 0x66, 0x66, 0x3c, 0x00],
    // Character 16: Lowercase 'p'
    [0x00, 0x00, 0x7c, 0x66, 0x66, 0x7c, 0x60, 0x60],
    // Character 17: Lowercase 'q'
    [0x00, 0x00, 0x3e, 0x66, 0x66, 0x3e, 0x06, 0x06],
    // Character 18: Lowercase 'r'
    [0x00, 0x00, 0x7c, 0x66, 0x60, 0x60, 0x60, 0x00],
    // Character 19: Lowercase 's'
    [0x00, 0x00, 0x3e, 0x60, 0x3c, 0x06, 0x7c, 0x00],
    // Character 20: Lowercase 't'
    [0x00, 0x18, 0x7e, 0x18, 0x18, 0x18, 0x0e, 0x00],
    // Character 21: Lowercase 'u'
    [0x00, 0x00, 0x66, 0x66, 0x66, 0x66, 0x3e, 0x00],
    // Character 22: Lowercase 'v'
    [0x00, 0x00, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00],
    // Character 23: Lowercase 'w'
    [0x00, 0x00, 0x63, 0x6b, 0x7f, 0x3e, 0x36, 0x00],
    // Character 24: Lowercase 'x'
    [0x00, 0x00, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0x00],
    // Character 25: Lowercase 'y'
    [0x00, 0x00, 0x66, 0x66, 0x66, 0x3e, 0x0c, 0x78],
    // Character 26: Lowercase 'z'
    [0x00, 0x00, 0x7e, 0x0c, 0x18, 0x30, 0x7e, 0x00],
    // Characters 27-31: Special bracket and graphic characters
    [0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00],  // Left bracket variant
    [0x0c, 0x12, 0x30, 0x7c, 0x30, 0x62, 0xfc, 0x00],  // Special symbol
    [0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00],  // Right bracket variant
    [0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18],  // Up arrow
    [0x00, 0x10, 0x30, 0x7f, 0x7f, 0x30, 0x10, 0x00],  // Left arrow
    
    // Character 32: Space (all zeros)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],
    // Character 33: Exclamation mark (!)
    [0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x00],
    // Character 34: Double quote (")
    [0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00],
    // Character 35: Hash/Number sign (#)
    [0x66, 0x66, 0xff, 0x66, 0xff, 0x66, 0x66, 0x00],
    // Character 36: Dollar sign ($)
    [0x18, 0x3e, 0x60, 0x3c, 0x06, 0x7c, 0x18, 0x00],
    // Character 37: Percent (%)
    [0x62, 0x66, 0x0c, 0x18, 0x30, 0x66, 0x46, 0x00],
    // Character 38: Ampersand (&)
    [0x3c, 0x66, 0x3c, 0x38, 0x67, 0x66, 0x3f, 0x00],
    // Character 39: Single quote (')
    [0x06, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00],
    // Character 40: Left parenthesis (()
    [0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00],
    // Character 41: Right parenthesis ())
    [0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00],
    // Character 42: Asterisk (*)
    [0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00],
    // Character 43: Plus (+)
    [0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00],
    // Character 44: Comma (,)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30],
    // Character 45: Minus/Hyphen (-)
    [0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00],
    // Character 46: Period (.)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00],
    // Character 47: Slash (/)
    [0x00, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00],
    
    // Characters 48-57: Numbers 0-9
    [0x3c, 0x66, 0x6e, 0x76, 0x66, 0x66, 0x3c, 0x00],  // 0
    [0x18, 0x18, 0x38, 0x18, 0x18, 0x18, 0x7e, 0x00],  // 1
    [0x3c, 0x66, 0x06, 0x0c, 0x30, 0x60, 0x7e, 0x00],  // 2
    [0x3c, 0x66, 0x06, 0x1c, 0x06, 0x66, 0x3c, 0x00],  // 3
    [0x06, 0x0e, 0x1e, 0x66, 0x7f, 0x06, 0x06, 0x00],  // 4
    [0x7e, 0x60, 0x7c, 0x06, 0x06, 0x66, 0x3c, 0x00],  // 5
    [0x3c, 0x66, 0x60, 0x7c, 0x66, 0x66, 0x3c, 0x00],  // 6
    [0x7e, 0x66, 0x0c, 0x18, 0x18, 0x18, 0x18, 0x00],  // 7
    [0x3c, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x00],  // 8
    [0x3c, 0x66, 0x66, 0x3e, 0x06, 0x66, 0x3c, 0x00],  // 9
    
    // Characters 58-64: Punctuation
    [0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00],  // Colon (:)
    [0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30],  // Semicolon (;)
    [0x0e, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0e, 0x00],  // Less than (<)
    [0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00],  // Equals (=)
    [0x70, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x70, 0x00],  // Greater than (>)
    [0x3c, 0x66, 0x06, 0x0c, 0x18, 0x00, 0x18, 0x00],  // Question mark (?)
    [0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00],  // At symbol (@)
    
    // Characters 65-90: Uppercase letters A-Z
    [0x18, 0x3c, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00],  // A
    [0x7c, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x7c, 0x00],  // B
    [0x3c, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3c, 0x00],  // C
    [0x78, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0x78, 0x00],  // D
    [0x7e, 0x60, 0x60, 0x78, 0x60, 0x60, 0x7e, 0x00],  // E
    [0x7e, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x00],  // F
    [0x3c, 0x66, 0x60, 0x6e, 0x66, 0x66, 0x3c, 0x00],  // G
    [0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00],  // H
    [0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00],  // I
    [0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x6c, 0x38, 0x00],  // J
    [0x66, 0x6c, 0x78, 0x70, 0x78, 0x6c, 0x66, 0x00],  // K
    [0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7e, 0x00],  // L
    [0x63, 0x77, 0x7f, 0x6b, 0x63, 0x63, 0x63, 0x00],  // M
    [0x66, 0x76, 0x7e, 0x7e, 0x6e, 0x66, 0x66, 0x00],  // N
    [0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00],  // O
    [0x7c, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x00],  // P
    [0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x0e, 0x00],  // Q
    [0x7c, 0x66, 0x66, 0x7c, 0x78, 0x6c, 0x66, 0x00],  // R
    [0x3c, 0x66, 0x60, 0x3c, 0x06, 0x66, 0x3c, 0x00],  // S
    [0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00],  // T
    [0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00],  // U
    [0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00],  // V
    [0x63, 0x63, 0x63, 0x6b, 0x7f, 0x77, 0x63, 0x00],  // W
    [0x66, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0x66, 0x00],  // X
    [0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x00],  // Y
    [0x7e, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x7e, 0x00],  // Z
    
    // Characters 91-127: Graphics characters and special symbols
    [0x18, 0x18, 0x18, 0xff, 0xff, 0x18, 0x18, 0x18],  // Cross/Plus graphic
    [0xc0, 0xc0, 0x30, 0x30, 0xc0, 0xc0, 0x30, 0x30],  // Checker pattern 1
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],  // Vertical line
    [0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc],  // Checker pattern 2
    [0x33, 0x99, 0xcc, 0x66, 0x33, 0x99, 0xcc, 0x66],  // Diagonal pattern
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  // Blank
    [0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0],  // Left half block
    [0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff],  // Bottom half block
    [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  // Top line
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],  // Bottom line
    [0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0],  // Right quarter
    [0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33],  // Inverse checker 1
    [0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03],  // Left quarter
    [0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x33, 0x33],  // Bottom checker
    [0xcc, 0x99, 0x33, 0x66, 0xcc, 0x99, 0x33, 0x66],  // Inverse diagonal
    [0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03],  // Left edge
    [0x18, 0x18, 0x18, 0x1f, 0x1f, 0x18, 0x18, 0x18],  // T-junction bottom
    [0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f],  // Bottom left quarter
    [0x18, 0x18, 0x18, 0x1f, 0x1f, 0x00, 0x00, 0x00],  // L-corner top right
    [0x00, 0x00, 0x00, 0xf8, 0xf8, 0x18, 0x18, 0x18],  // L-corner bottom left
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff],  // Bottom edge
    [0x00, 0x00, 0x00, 0x1f, 0x1f, 0x18, 0x18, 0x18],  // L-corner bottom right
    [0x18, 0x18, 0x18, 0xff, 0xff, 0x00, 0x00, 0x00],  // T-junction top
    [0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0x18, 0x18],  // T-junction bottom
    [0x18, 0x18, 0x18, 0xf8, 0xf8, 0x18, 0x18, 0x18],  // T-junction right
    [0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0],  // Right edge thick
    [0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0],  // Right 3/4 block
    [0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07],  // Left 3/8 block
    [0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  // Top 1/4 block
    [0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00],  // Top 3/8 block
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff],  // Bottom 3/8 block
    [0x01, 0x03, 0x06, 0x6c, 0x78, 0x70, 0x60, 0x00],  // Curve pattern
    [0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0],  // Bottom right quarter
    [0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00],  // Top left quarter
    [0x18, 0x18, 0x18, 0xf8, 0xf8, 0x00, 0x00, 0x00],  // L-corner top left
    [0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00],  // Top right quarter
    [0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f],  // Split quarters
];

/// Commodore 64 uppercase character set (PETSCII set 2) 
///
/// This array contains 128 character definitions representing the C64's uppercase
/// character set, also known as PETSCII set 2. This set was typically used when
/// the C64 was in "graphics" mode, providing uppercase letters and additional
/// graphics characters.
///
/// ## Character Mapping (partial list)
/// - Index 0: Special character (copyright symbol variant)
/// - Index 1-26: Uppercase letters A-Z (different from C64LOW)
/// - Index 27-31: Special bracket and arrow characters  
/// - Index 32: Space character
/// - Index 33-47: Punctuation and symbols (!, ", #, $, %, etc.)
/// - Index 48-57: Numbers 0-9 (same as C64LOW)
/// - Index 58-64: More punctuation (:, ;, <, =, >, ?, @)
/// - Index 65-90: Graphics characters and symbols
/// - Index 91-127: Extended graphics and block characters
///
/// ## Differences from C64LOW
/// - Characters 1-26 contain uppercase letters instead of lowercase
/// - Characters 65-90 contain graphics symbols instead of uppercase letters
/// - Extended graphics character set in positions 91-127
/// - More block drawing and geometric pattern characters
///
/// ## Usage Context
/// This character set was commonly used for:
/// - BASIC programming listings (which used uppercase by default)
/// - Graphics-intensive applications requiring block characters
/// - Text displays where uppercase-only text was acceptable
/// - Creating simple graphics using character-based drawing
pub const C64UP: [[u8; 8]; 128] = [
    // Character 0: Copyright symbol variant (same as C64LOW)
    [0x3c, 0x66, 0x6e, 0x6e, 0x60, 0x62, 0x3c, 0x00],
    // Characters 1-26: Uppercase letters A-Z
    [0x18, 0x3c, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00],  // A
    [0x7c, 0x66, 0x66, 0x7c, 0x66, 0x66, 0x7c, 0x00],  // B
    [0x3c, 0x66, 0x60, 0x60, 0x60, 0x66, 0x3c, 0x00],  // C
    [0x78, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0x78, 0x00],  // D
    [0x7e, 0x60, 0x60, 0x78, 0x60, 0x60, 0x7e, 0x00],  // E
    [0x7e, 0x60, 0x60, 0x78, 0x60, 0x60, 0x60, 0x00],  // F
    [0x3c, 0x66, 0x60, 0x6e, 0x66, 0x66, 0x3c, 0x00],  // G
    [0x66, 0x66, 0x66, 0x7e, 0x66, 0x66, 0x66, 0x00],  // H
    [0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00],  // I
    [0x1e, 0x0c, 0x0c, 0x0c, 0x0c, 0x6c, 0x38, 0x00],  // J
    [0x66, 0x6c, 0x78, 0x70, 0x78, 0x6c, 0x66, 0x00],  // K
    [0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x7e, 0x00],  // L
    [0x63, 0x77, 0x7f, 0x6b, 0x63, 0x63, 0x63, 0x00],  // M
    [0x66, 0x76, 0x7e, 0x7e, 0x6e, 0x66, 0x66, 0x00],  // N
    [0x3c, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00],  // O
    [0x7c, 0x66, 0x66, 0x7c, 0x60, 0x60, 0x60, 0x00],  // P
    [0x3c, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x0e, 0x00],  // Q
    [0x7c, 0x66, 0x66, 0x7c, 0x78, 0x6c, 0x66, 0x00],  // R
    [0x3c, 0x66, 0x60, 0x3c, 0x06, 0x66, 0x3c, 0x00],  // S
    [0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00],  // T
    [0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x00],  // U
    [0x66, 0x66, 0x66, 0x66, 0x66, 0x3c, 0x18, 0x00],  // V
    [0x63, 0x63, 0x63, 0x6b, 0x7f, 0x77, 0x63, 0x00],  // W
    [0x66, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0x66, 0x00],  // X
    [0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x18, 0x00],  // Y
    [0x7e, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x7e, 0x00],  // Z
    
    // Characters 27-31: Special bracket and arrow characters (same as C64LOW)
    [0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00],  // Left bracket variant
    [0x0c, 0x12, 0x30, 0x7c, 0x30, 0x62, 0xfc, 0x00],  // Special symbol
    [0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c, 0x00],  // Right bracket variant
    [0x00, 0x18, 0x3c, 0x7e, 0x18, 0x18, 0x18, 0x18],  // Up arrow
    [0x00, 0x10, 0x30, 0x7f, 0x7f, 0x30, 0x10, 0x00],  // Left arrow
    
    // Characters 32-47: Space and punctuation (same as C64LOW)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  // Space
    [0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x00],  // !
    [0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00],  // "
    [0x66, 0x66, 0xff, 0x66, 0xff, 0x66, 0x66, 0x00],  // #
    [0x18, 0x3e, 0x60, 0x3c, 0x06, 0x7c, 0x18, 0x00],  // $
    [0x62, 0x66, 0x0c, 0x18, 0x30, 0x66, 0x46, 0x00],  // %
    [0x3c, 0x66, 0x3c, 0x38, 0x67, 0x66, 0x3f, 0x00],  // &
    [0x06, 0x0c, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00],  // '
    [0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00],  // (
    [0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00],  // )
    [0x00, 0x66, 0x3c, 0xff, 0x3c, 0x66, 0x00, 0x00],  // *
    [0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00],  // +
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30],  // ,
    [0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00],  // -
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00],  // .
    [0x00, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60, 0x00],  // /
    
    // Characters 48-57: Numbers 0-9 (same as C64LOW)
    [0x3c, 0x66, 0x6e, 0x76, 0x66, 0x66, 0x3c, 0x00],  // 0
    [0x18, 0x18, 0x38, 0x18, 0x18, 0x18, 0x7e, 0x00],  // 1
    [0x3c, 0x66, 0x06, 0x0c, 0x30, 0x60, 0x7e, 0x00],  // 2
    [0x3c, 0x66, 0x06, 0x1c, 0x06, 0x66, 0x3c, 0x00],  // 3
    [0x06, 0x0e, 0x1e, 0x66, 0x7f, 0x06, 0x06, 0x00],  // 4
    [0x7e, 0x60, 0x7c, 0x06, 0x06, 0x66, 0x3c, 0x00],  // 5
    [0x3c, 0x66, 0x60, 0x7c, 0x66, 0x66, 0x3c, 0x00],  // 6
    [0x7e, 0x66, 0x0c, 0x18, 0x18, 0x18, 0x18, 0x00],  // 7
    [0x3c, 0x66, 0x66, 0x3c, 0x66, 0x66, 0x3c, 0x00],  // 8
    [0x3c, 0x66, 0x66, 0x3e, 0x06, 0x66, 0x3c, 0x00],  // 9
    
    // Characters 58-64: More punctuation (same as C64LOW)
    [0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x00, 0x00],  // :
    [0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30],  // ;
    [0x0e, 0x18, 0x30, 0x60, 0x30, 0x18, 0x0e, 0x00],  // <
    [0x00, 0x00, 0x7e, 0x00, 0x7e, 0x00, 0x00, 0x00],  // =
    [0x70, 0x18, 0x0c, 0x06, 0x0c, 0x18, 0x70, 0x00],  // >
    [0x3c, 0x66, 0x06, 0x0c, 0x18, 0x00, 0x18, 0x00],  // ?
    [0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00],  // @
    
    // Characters 65-90: Graphics characters and symbols (different from C64LOW)
    [0x08, 0x1c, 0x3e, 0x7f, 0x7f, 0x1c, 0x3e, 0x00],  // Heart symbol
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],  // Vertical line (thick)
    [0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00],  // Horizontal line
    [0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00],  // Horizontal line (mid)
    [0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00],  // Horizontal line (upper)
    [0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00],  // Horizontal line (lower)
    [0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30],  // Vertical line (right)
    [0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c],  // Vertical line (left)
    [0x00, 0x00, 0x00, 0xe0, 0xf0, 0x38, 0x18, 0x18],  // Corner (bottom-left)
    [0x18, 0x18, 0x1c, 0x0f, 0x07, 0x00, 0x00, 0x00],  // Corner (top-right)
    [0x18, 0x18, 0x38, 0xf0, 0xe0, 0x00, 0x00, 0x00],  // Corner (top-left)
    [0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xff, 0xff],  // L-shape (horizontal bottom)
    [0xc0, 0xe0, 0x70, 0x38, 0x1c, 0x0e, 0x07, 0x03],  // Diagonal (top-left to bottom-right)
    [0x03, 0x07, 0x0e, 0x1c, 0x38, 0x70, 0xe0, 0xc0],  // Diagonal (bottom-left to top-right)
    [0xff, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0],  // L-shape (horizontal top)
    [0xff, 0xff, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03],  // L-shape (horizontal top, right)
    [0x00, 0x3c, 0x7e, 0x7e, 0x7e, 0x7e, 0x3c, 0x00],  // Circle (filled)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00],  // Horizontal line (bottom)
    [0x36, 0x7f, 0x7f, 0x7f, 0x3e, 0x1c, 0x08, 0x00],  // Diamond symbol
    [0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60],  // Vertical line (thick right)
    [0x00, 0x00, 0x00, 0x07, 0x0f, 0x1c, 0x18, 0x18],  // Corner (bottom-right)
    [0xc3, 0xe7, 0x7e, 0x3c, 0x3c, 0x7e, 0xe7, 0xc3],  // Cross pattern
    [0x00, 0x3c, 0x7e, 0x66, 0x66, 0x7e, 0x3c, 0x00],  // Circle (hollow)
    [0x18, 0x18, 0x66, 0x66, 0x18, 0x18, 0x3c, 0x00],  // Bow-tie pattern
    [0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06],  // Vertical line (thin left)
    [0x08, 0x1c, 0x3e, 0x7f, 0x3e, 0x1c, 0x08, 0x00],  // Diamond (filled)
    
    // Characters 91-127: Extended graphics and block characters
    [0x18, 0x18, 0x18, 0xff, 0xff, 0x18, 0x18, 0x18],  // Cross junction
    [0xc0, 0xc0, 0x30, 0x30, 0xc0, 0xc0, 0x30, 0x30],  // Checker pattern (variant 1)
    [0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18],  // Vertical line (standard)
    [0x00, 0x00, 0x03, 0x3e, 0x76, 0x36, 0x36, 0x00],  // Special character
    [0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x01],  // Gradient (diagonal fade)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  // Space (duplicate)
    [0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0],  // Left half block (duplicate)
    [0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff],  // Bottom half block (duplicate)
    [0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  // Top line (duplicate)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff],  // Bottom line (duplicate)
    [0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0],  // Right quarter block (duplicate)
    [0xcc, 0xcc, 0x33, 0x33, 0xcc, 0xcc, 0x33, 0x33],  // Checker pattern (duplicate)
    [0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03],  // Left quarter block (duplicate)
    [0x00, 0x00, 0x00, 0x00, 0xcc, 0xcc, 0x33, 0x33],  // Bottom checker (duplicate)
    [0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x80],  // Gradient (reverse diagonal)
    [0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03],  // Left edge (duplicate)
    [0x18, 0x18, 0x18, 0x1f, 0x1f, 0x18, 0x18, 0x18],  // T-junction (duplicate)
    [0x00, 0x00, 0x00, 0x00, 0x0f, 0x0f, 0x0f, 0x0f],  // Bottom left quarter (duplicate)
    [0x18, 0x18, 0x18, 0x1f, 0x1f, 0x00, 0x00, 0x00],  // L-corner (duplicate)
    [0x00, 0x00, 0x00, 0xf8, 0xf8, 0x18, 0x18, 0x18],  // L-corner (duplicate)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff],  // Bottom edge (duplicate)
    [0x00, 0x00, 0x00, 0x1f, 0x1f, 0x18, 0x18, 0x18],  // L-corner (duplicate)
    [0x18, 0x18, 0x18, 0xff, 0xff, 0x00, 0x00, 0x00],  // T-junction (duplicate)
    [0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0x18, 0x18],  // T-junction (duplicate)
    [0x18, 0x18, 0x18, 0xf8, 0xf8, 0x18, 0x18, 0x18],  // T-junction (duplicate)
    [0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0],  // Right edge (duplicate)
    [0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0],  // Right 3/4 block (duplicate)
    [0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07],  // Left 3/8 block (duplicate)
    [0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00],  // Top edge (duplicate)
    [0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00],  // Top 3/8 block (duplicate)
    [0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff],  // Bottom 3/8 block (duplicate)
    [0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0xff, 0xff],  // L-shape (left with bottom)
    [0x00, 0x00, 0x00, 0x00, 0xf0, 0xf0, 0xf0, 0xf0],  // Bottom right quarter (duplicate)
    [0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00],  // Top left quarter (duplicate)
    [0x18, 0x18, 0x18, 0xf8, 0xf8, 0x00, 0x00, 0x00],  // L-corner (duplicate)
    [0xf0, 0xf0, 0xf0, 0xf0, 0x00, 0x00, 0x00, 0x00],  // Top right quarter (duplicate)
    [0xf0, 0xf0, 0xf0, 0xf0, 0x0f, 0x0f, 0x0f, 0x0f],  // Split quarters (duplicate)
];

